name: CI Quality Gates

on:
  push:
    branches: [main, testing-suite]
  pull_request:

jobs:
  Quality_Gate:
    runs-on: ubuntu-latest

    env:
      SECRET_KEY: TEST_SECRET_KEY

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install Dependencies
        run: poetry install

      - name: Start Backend
        run: |
          poetry run uvicorn backend.app.main:app --host 127.0.0.1 --port 8000 &
          sleep 5

      - name: Start Streamlit Frontend
        run: |
          poetry run streamlit run frontend/app.py --server.headless true &
          sleep 5

      - name: Wait for Frontend to be Ready
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:8501; do
            echo "Waiting for Streamlit to start..."
            sleep 2
          done

      - name: Run Ruff (Lint)
        run: |
          echo "🔍 Running Ruff (Lint)"
          poetry run ruff . --quiet
          echo "✅ Ruff passed!"

      - name: Run Flake8 (Style Guide)
        run: |
          echo "🧹 Running Flake8"
          poetry run flake8 .
          echo "✅ Flake8 passed!"

      - name: Run Bandit (Security Static Analysis)
        run: |
          echo "🔐 Running Bandit"
          poetry run bandit -r backend -ll
          echo "✅ Bandit passed!"

      - name: Run Pytest with Coverage and Fuzzing
        run: |
          echo "🧪 Running Pytest with Coverage and Fuzzing"
          mkdir -p reports
          poetry run pytest --cov=backend/app \
                            --cov-report=term-missing \
                            --cov-report=html:reports/htmlcov \
                            | tee reports/pytest-output.txt
          echo "✅ Pytest passed with sufficient coverage!"

      - name: Run Mutation Testing (Mutmut)
        continue-on-error: true
        run: |
          echo "🧬 Running Mutmut (Mutation Testing)"
          poetry run mutmut run > reports/mutmut-output.txt 2>&1
          poetry run mutmut results --all true >> reports/mutmut-output.txt
          echo "✅ Mutmut finished. Review survivors in artifacts if any."

      - name: Run Locust Performance Test
        continue-on-error: true
        run: |
          echo "📈 Running Locust Performance Test"
          poetry run locust -f tests/perf_test_locust.py \
                            --headless \
                            --host=http://localhost:8000 \
                            -u 5 -r 2 -t 10s \
                            > reports/locust-output.txt 2>&1
          echo "✅ Locust performance test completed!"

      - name: Save Ruff, Flake8, and Bandit Outputs
        run: |
            mkdir -p reports
  
            echo "🔍 Saving Ruff output"
            poetry run ruff . --quiet > reports/ruff-output.txt
  
            echo "🧹 Saving Flake8 output"
            poetry run flake8 . > reports/flake8-output.txt
  
            echo "🔐 Saving Bandit output"
            poetry run bandit -r backend -ll > reports/bandit-output.txt
            echo "✅ Outputs saved!"

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-artifacts
          path: reports

      - name: ✅ CI Finished Successfully
        run: echo "🎉 All quality checks completed! View test reports in artifacts."
